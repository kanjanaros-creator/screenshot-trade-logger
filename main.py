# main.py
import os, io, json, logging
from datetime import datetime, timezone
from typing import Dict, Any
from decimal import Decimal, getcontext

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from ocr_engine import extract_text_from_image
from parser_engine import parse_from_text, guess_exchange
from storage import TradeStorage
from pnl import PnLEngine
from utils import parse_bool

# ---------- Config & Utils ----------
getcontext().prec = 18

def fmt(x):
    if x is None:
        return "-"
    s = format(Decimal(str(x)), "f").rstrip("0").rstrip(".")
    return s if s else "0"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tradebot")

AUTO_ACCEPT = parse_bool(os.getenv("AUTO_ACCEPT", "false"))

storage = TradeStorage()
pnl = PnLEngine(storage)

WELCOME_TH = (
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏Ñ‡∏õ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏â‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞\n"
    "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n"
    "/auto_on ‚Äì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô\n"
    "/auto_off ‚Äì ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n"
    "/status ‚Äì ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ\n"
)

# ---------- Preview ----------
def _format_preview(trade: Dict[str, Any]) -> str:
    kv = []
    if trade.get("exchange"):
        kv.append(f"exchange: {trade['exchange']}")
    if trade.get("pair"):
        kv.append(f"pair: {trade['pair']}")
    if trade.get("side"):
        kv.append(f"side: {trade['side']}")
    if trade.get("price") is not None:
        kv.append(f"price: {fmt(trade['price'])}")
    if trade.get("qty") is not None:
        kv.append(f"qty: {fmt(trade['qty'])}")
    if trade.get("fee") is not None:
        kv.append(f"fee: {fmt(trade['fee'])}")
    if trade.get("quote_amount") is not None:
        qa = fmt(trade["quote_amount"])
        qas = trade.get("quote_asset") or ""
        kv.append(f"spent: {qa} {qas}".rstrip())
    if trade.get("time"):
        kv.append(f"time: {trade['time']}")
    return "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞:\n" + "\n".join(kv)

def _status_text_fallback() -> str:
    # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏ô PnLEngine
    for name in ("status_text", "format_status", "summary_text", "summary", "get_status_text"):
        fn = getattr(pnl, name, None)
        if callable(fn):
            try:
                return fn()
            except Exception:
                logger.exception("status method '%s' failed", name)
                break
    return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡πà‡∏∞"

# ---------- Command Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_TH)

async def auto_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AUTO_ACCEPT
    AUTO_ACCEPT = True
    await update.message.reply_text("‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‚úÖ")

async def auto_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AUTO_ACCEPT
    AUTO_ACCEPT = False
    await update.message.reply_text("‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‚õîÔ∏è")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = _status_text_fallback()
        await update.message.reply_text(text)
    except Exception:
        logger.exception("status failed")
        await update.message.reply_text("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡πà‡∏∞")

# ---------- Photo Handler ----------
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photos = update.message.photo
    if not photos:
        await update.message.reply_text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡πà‡∏∞")
        return

    photo = photos[-1]
    bio = await photo.get_file()
    img_bytes = await bio.download_as_bytearray()

    # OCR ‚Üí parse
    text = extract_text_from_image(io.BytesIO(img_bytes))
    ex = guess_exchange(text)
    parsed = parse_from_text(text)
    logger.info("parsed=%s", parsed)

    # ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏•‡∏¢
    if not parsed:
        await update.message.reply_text("‡∏¢‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å ‡∏•‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞")
        return

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Wallet ‚Üí ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏£‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå ok ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    if parsed.get("kind") == "wallet":
        try:
            assets = parsed["data"]["assets"]
            lines = []
            for a in assets[:8]:
                qty = a.get("qty")
                usd = a.get("usd")
                line = f"{a.get('asset','?')}: {fmt(qty)}"
                if usd is not None:
                    line += f" (${fmt(usd)})"
                lines.append(line)

            msg = "‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Å‡πà‡∏∞:\n" + "\n".join(lines)
            if len(assets) > 8:
                msg += f"\n‚Ä¶ ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(assets)-8} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
            msg += "\n\n‡∏û‡∏¥‡∏°‡∏û‡πå 'ok' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏ô‡πá‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"

            context.user_data["pending_wallet"] = assets
            await update.message.reply_text(msg)
            return
        except Exception:
            logger.exception("wallet preview failed")
            await update.message.reply_text("‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏∞")
            return

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô trade ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ trade ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    trade = parsed["data"]
    trade["exchange"] = trade.get("exchange") or ex
    trade["src_image_id"] = photo.file_unique_id
    trade["ts_iso"] = datetime.now(timezone.utc).isoformat()

    if not AUTO_ACCEPT:
        preview = _format_preview(trade)
        preview += "\n\n‡∏û‡∏¥‡∏°‡∏û‡πå 'ok' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô JSON (‡πÄ‡∏ä‡πà‡∏ô {\"price\": 0.123})"
        await update.message.reply_text(preview)
        context.user_data["pending_trade"] = trade
    else:
        result_msg = pnl.record_trade(trade)
        await update.message.reply_text(result_msg)

# ---------- Text Handler ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    pending_trade = context.user_data.get("pending_trade")
    pending_wallet = context.user_data.get("pending_wallet")

    # 1) ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "‡∏û‡∏≠‡∏£‡πå‡∏ï" (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Wallet)
    if pending_wallet and txt.lower() in ("ok", "‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡∏ï‡∏Å‡∏•‡∏á", "yes", "y"):
        try:
            pnl.storage.record_snapshot(pending_wallet)  # ‡πÉ‡∏ä‡πâ API ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
            context.user_data["pending_wallet"] = None
            await update.message.reply_text("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‚úÖ")
        except Exception:
            logger.exception("record_snapshot failed")
            await update.message.reply_text("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏∞")
        return

    # 2) ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "trade"
    if pending_trade:
        if txt.lower() in ("ok", "‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡∏ï‡∏Å‡∏•‡∏á", "yes", "y"):
            result_msg = pnl.record_trade(pending_trade)
            context.user_data["pending_trade"] = None
            await update.message.reply_text(result_msg)
            return

        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ JSON (‡πÄ‡∏ä‡πà‡∏ô {"price": 0.123})
        try:
            patch = json.loads(txt)
            pending_trade.update(patch)
            result_msg = pnl.record_trade(pending_trade)
            context.user_data["pending_trade"] = None
            await update.message.reply_text(result_msg)
        except Exception:
            await update.message.reply_text("‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå 'ok' ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô JSON (‡πÄ‡∏ä‡πà‡∏ô {\"price\": 0.123})")
        return

    # 3) ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡πâ‡∏≤‡∏á ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ
    await update.message.reply_text("‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üòä")

# ---------- Main ----------
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        return

    logger.info("main(): ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‚Ä¶")
    app = Application.builder().token(token).build()
    logger.info("main(): ‡πÅ‡∏≠‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("auto_on", auto_on))
    app.add_handler(CommandHandler("auto_off", auto_off))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    logger.info("main(): ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô handlers ‡πÅ‡∏•‡πâ‡∏ß")
    logger.info("main(): ‡πÄ‡∏£‡∏¥‡πà‡∏° run_polling()")
    app.run_polling()
    logger.info("Bot started.")

if __name__ == "__main__":
    try:
        main()
    except Exception:
        logging.exception("Fatal error in main()")
        raise